const TelegramBot = require("node-telegram-bot-api");

const TOKEN = '';
const CHANNEL_USERNAME = '';

const bot = new TelegramBot(TOKEN, {polling: true});

const inlineKeyboard = [[{text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å!', callback_data: 'button_pressed',},],];
const options = {reply_markup: JSON.stringify({inline_keyboard: inlineKeyboard,}),};

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    

    bot.sendAnimation(chatId, 'gif_example.gif')
    .then(() => {
        bot.sendMessage(chatId, `–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ ${CHANNEL_USERNAME}? –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º! üöÄ`, options);  
    });
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.message.from.id;
    const messageId = query.message.message_id;
    const data = query.data;
  
    if (data === 'button_pressed') {
        try {
            const member = await bot.getChatMember(CHANNEL_USERNAME, userId);
            const status = member.status;
        
            if (['member', 'administrator', 'creator'].includes(status)) {
              bot.sendMessage(chatId, '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!');
            } else {
              bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å!');
            }
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
            bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ.');
          }
    }
  });